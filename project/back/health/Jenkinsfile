pipeline {
    agent any

    tools {
        gradle 'gradle_8.10'
    }

    environment {
        GITLAB_PROJECT = 's11-bigdata-recom-sub1'
        GITLAB_REPO = 'S11P21C106'
        GITLAB_BRANCH = 'develop/BE'
        GITLAB_CREDENTIAL = 'Gitlab_Personal_Token'
        DOCKER_IMAGE_NAME = 's11p21c106_backend'
        DOCKER_REPOSITORY = 'thenoface'
        DOCKER_CREDENTIAL = 'Dockerhub_Access_Token'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${GITLAB_BRANCH}",
                    url: "https://lab.ssafy.com/${GITLAB_PROJECT}/${GITLAB_REPO}.git",
                    credentialsId: "${GITLAB_CREDENTIAL}"
            }
        }

        stage('Build SpringBoot Project') {
            steps {
                withCredentials([file(credentialsId: 'Spring_Properties', variable: 'PROPERTIES')])
                {
                    dir('project/back/health') {
                        script {
                            def propertiesFile = './src/main/resources/application.properties'
                            sh 'mkdir -p ./src/main/resources'
                            sh "[ -f ${propertiesFile} ] && chmod 0600 ${propertiesFile} || true"
                            sh '''
                                cp ${PROPERTIES} ./src/main/resources/application.properties \
                                || (echo 'Unable to copy file'; exit 1)
                            '''
                            sh 'chmod a+x ./gradlew'
                            sh './gradlew build'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('project/back/health') {
                        docker.build("${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}")
                    }
                }
            }
        }

        stage('Push Image to Dockerhub') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: "${DOCKER_CREDENTIAL}",
                                         passwordVariable: 'DOCKER_PASSWORD',
                                         usernameVariable: 'DOCKER_USERNAME')]) {
                            sh 'echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin'
                        }
                    docker.image("${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}").push()
                    docker.image("${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}").push('latest')
                }
            }
        }

        stage('Backend Deploy') {
            steps {
                sh 'docker stop health_backend || true'
                sh 'docker rm health_backend --force || true'
                sh '''
                    docker run --name health_backend \
                        -d --net caddy --expose 8080 \
                        -l caddy=j11c106.p.ssafy.io \
                        -l caddy.handle=/api* \
                        -l caddy.handle.reverse_proxy="{{upstreams 8080}}" \
                        --pull never thenoface/s11p21c106_backend:latest
                '''
            }
        }
    }

    post {
        always {
            script {
                def imageName = "${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}"

                echo "Getting lastest image ID for ${imageName}"
                def latestImage = sh(script:
                    "docker images --filter=reference='${imageName}:latest' --format '{{.ID}}'",
                    returnStdout: true).trim()
                echo "Latest Image ID: ${latestImage}"

                echo "Getting previous image(s) ID for ${imageName}"
                def previousImages = sh(script:
                    "docker images --filter=reference='${imageName}' --format '{{.ID}}' | grep -v '${latestImage}' || true",
                    returnStdout: true).trim().replaceAll('\n', ' ')

                if (previousImages) {
                    echo "Previously built image(s): ${previousImages}"
                    sh "docker rmi ${previousImages} || echo 'Failed to remove one or more images'"
                } else {
                    echo 'Previous built images not found'
                }

                echo "Getting duplicated image(s) with latest tag (ID: ${latestImage})"
                def duplicateImages = sh(script:
                    """
                    docker images --filter=reference='${imageName}' --format '{{.Repository}}:{{.Tag}} {{.ID}}' \
                    | grep '${latestImage}' | grep -v ':latest' | awk '{print \$1}' || true
                    """, returnStdout: true).trim().replaceAll('\n', ' ')

                if (duplicateImages) {
                    echo "Duplicated image(s) with latest tag: ${duplicateImages}"
                    sh "docker rmi ${duplicateImages} || echo 'Failed to remove one or more images'"
                } else {
                    echo 'Duplicate images not found'
                }
            }
            cleanWs()
        }
    }
}
